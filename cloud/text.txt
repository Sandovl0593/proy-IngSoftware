def create_member(member: dict):
    try:
        table.put_item(Item=member)
        return member
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)


def delete_member(member: dict):
    try:
        response = table.delete_item(
            Key={
                "code": member["code"]
            }
        )
        return response
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)

def update_member(member: dict):
    try:
        response = table.update_item(
            Key={
                "code": member["code"]
            },
            UpdateExpression="SET name = :name, area = :area, age = :age, email = :email, role = :role, emotion_score = :emotion_score",
            ExpressionAttributeValues={
                ":name": member["name"],
                ":area": member["area"],
                ":age": member["age"],
                ":email": member["email"],
                ":role": member["role"],
                ":emotion_score": member["emotion_score"]
            }
        )
        return response
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)


def create_emotion_log(emotion_log: dict):
    try:
        table.put_item(Item=emotion_log)
        score = emotion_scores.get(emotion_log["emotion"], 0)
        dynamodb.update_item(
            TableName='Member',
            Key={'code': {'S': emotion_log["member_code"]}},
            UpdateExpression='SET emotion_score = emotion_score + :score',
            ExpressionAttributeValues={':score': {'N': str(score)}}
        )
        return emotion_log
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)

def delete_emotion_log(emotion_log: dict):
    try:
        response = table.delete_item(
            Key={
                "member_code": emotion_log["member_code"],
                "timestamp": emotion_log["timestamp"]
            }
        )
        return response
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)

def update_emotion_log(emotion_log: dict):
    try:
        response = table.put_item(
            Key={
                "member_code": emotion_log["member_code"],
                "timestamp": emotion_log["timestamp"]
            },
            UpdateExpression="SET emotion = :emotion",
            ExpressionAttributeValues={
                ":emotion": emotion_log["emotion"]
            }
        )
        return response
    except ClientError as e:
        return JSONResponse(content=e.response["Error"], status_code=500)

@routes_emotion_log.post("/create", response_model=EmotionLog)
def create(emotion_log: EmotionLog):
    print(emotion_log.model_dump())
    return create_emotion_log(emotion_log.model_dump())

@routes_emotion_log.delete("/delete")
def delete(emotion_log: EmotionLog):
    return delete_emotion_log(emotion_log.model_dump())

@routes_emotion_log.put("/update")
def update(emotion_log: EmotionLog):
    return update_emotion_log(emotion_log.model_dump())

    




{
  "201033134": {
    "Jueves": [
      "14:00",
      "16:00"
    ],
    "Lunes": [
      "10:00",
      "13:00",
      "14:00",
      "15:00",
      "17:00"
    ],
    "Martes": [
      "12:00",
      "13:00",
      "15:00",
      "16:00",
      "17:00"
    ],
    "Viernes": [
      "13:00",
      "15:00"
    ],
  },
  "202033101": {
    "Jueves": [
      "12:00",
      "13:00",
      "14:00",
      "15:00",
      "16:00"
    ],
    "Lunes": [
      "14:00",
      "15:00",
      "17:00"
    ],
    "Miercoles": [
      "16:00",
      "17:00"
    ],
    "Viernes": [
      "15:00",
      "16:00"
    ]
  }
}

[
    {
        'dia': 'Martes',
        'horas': ['12:00', '16:00'],
    },
    {
        'dia': 'Miercoles',
        'horas': ['15:00', '17:00']
    },
    {
        'dia': 'Lunes',
        'horas': ['11:00', '12:00']
    }
]